public class AppUser : IdentityUser<int>
{
    // Existing properties...

    public string InitialPassword { get; set; }
    public bool IsPasswordChangeRequired { get; set; }
    public string Role { get; set; }

    // Existing properties...
}

public class UserService : IUserService
{
    // Existing properties and methods...

    public async Task<AppUser> CreateSuperAdmin(string email, string role, Institution institution)
    {
        var password = GenerateRandomPassword();
        var user = new AppUser
        {
            UserName = email,
            Email = email,
            InitialPassword = password,
            Role = role,
            Institution = institution,
            IsPasswordChangeRequired = true
        };

        var result = await _userManager.CreateAsync(user, password);
        if (result.Succeeded)
        {
            await _emailService.SendPasswordEmail(email, password);
            return user;
        }
        else
        {
            throw new Exception("Error occurred while creating superadmin user");
        }
    }

    private string GenerateRandomPassword()
    {
        // Implement your password generation logic here
    }
}

public interface IEmailService
{
    Task SendPasswordEmail(string email, string password);
}

public class EmailService : IEmailService
{
    public async Task SendPasswordEmail(string email, string password)
    {
        var smtpClient = new SmtpClient("smtp.example.com")
        {
            Port = 587,
            Credentials = new NetworkCredential("username@example.com", "password"),
            EnableSsl = true,
        };

        var mailMessage = new MailMessage
        {
            From = new MailAddress("username@example.com"),
            Subject = "Your initial password",
            Body = $"Your initial password is {password}",
            IsBodyHtml = true,
        };
        mailMessage.To.Add(email);

        await smtpClient.SendMailAsync(mailMessage);
    }
}